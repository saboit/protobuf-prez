// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FieldThermometer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from FieldThermometer.proto</summary>
public static partial class FieldThermometerReflection {

  #region Descriptor
  /// <summary>File descriptor for FieldThermometer.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static FieldThermometerReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChZGaWVsZFRoZXJtb21ldGVyLnByb3RvIqkDChRNZWFzdXJlZFRlbXBlcmF0",
          "dXJlcxIfChJmaWVsZFRoZXJtb21ldGVySWQYASABKANIAIgBARJDCg9tZWFz",
          "dXJlbWVudFR5cGUYAiABKA4yJS5NZWFzdXJlZFRlbXBlcmF0dXJlcy5NZWFz",
          "dXJlbWVudFR5cGVIAYgBARIrCiNtZWFzdXJlZFRlbXBlcmF0dXJlc0luRGVn",
          "cmVlQ2Vsc2l1cxgDIAMoAhJHChdsYXN0UmVjb3JkZWREZXZpY2VFcnJvchgE",
          "IAEoCzIhLk1lYXN1cmVkVGVtcGVyYXR1cmVzLkRldmljZUVycm9ySAKIAQEa",
          "LwoLRGV2aWNlRXJyb3ISFAoHbWVzc2FnZRgBIAEoCUgAiAEBQgoKCF9tZXNz",
          "YWdlIj0KD01lYXN1cmVtZW50VHlwZRIMCghQRVJJT0RJQxAAEg0KCVJFUVVF",
          "U1RFRBABEg0KCUVYVFJFTUlUWRACQhUKE19maWVsZFRoZXJtb21ldGVySWRC",
          "EgoQX21lYXN1cmVtZW50VHlwZUIaChhfbGFzdFJlY29yZGVkRGV2aWNlRXJy",
          "b3JiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MeasuredTemperatures), global::MeasuredTemperatures.Parser, new[]{ "FieldThermometerId", "MeasurementType", "MeasuredTemperaturesInDegreeCelsius", "LastRecordedDeviceError" }, new[]{ "FieldThermometerId", "MeasurementType", "LastRecordedDeviceError" }, new[]{ typeof(global::MeasuredTemperatures.Types.MeasurementType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MeasuredTemperatures.Types.DeviceError), global::MeasuredTemperatures.Types.DeviceError.Parser, new[]{ "Message" }, new[]{ "Message" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class MeasuredTemperatures : pb::IMessage<MeasuredTemperatures>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<MeasuredTemperatures> _parser = new pb::MessageParser<MeasuredTemperatures>(() => new MeasuredTemperatures());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<MeasuredTemperatures> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::FieldThermometerReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MeasuredTemperatures() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MeasuredTemperatures(MeasuredTemperatures other) : this() {
    _hasBits0 = other._hasBits0;
    fieldThermometerId_ = other.fieldThermometerId_;
    measurementType_ = other.measurementType_;
    measuredTemperaturesInDegreeCelsius_ = other.measuredTemperaturesInDegreeCelsius_.Clone();
    lastRecordedDeviceError_ = other.lastRecordedDeviceError_ != null ? other.lastRecordedDeviceError_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public MeasuredTemperatures Clone() {
    return new MeasuredTemperatures(this);
  }

  /// <summary>Field number for the "fieldThermometerId" field.</summary>
  public const int FieldThermometerIdFieldNumber = 1;
  private readonly static long FieldThermometerIdDefaultValue = 0L;

  private long fieldThermometerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FieldThermometerId {
    get { if ((_hasBits0 & 1) != 0) { return fieldThermometerId_; } else { return FieldThermometerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fieldThermometerId_ = value;
    }
  }
  /// <summary>Gets whether the "fieldThermometerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFieldThermometerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fieldThermometerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFieldThermometerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "measurementType" field.</summary>
  public const int MeasurementTypeFieldNumber = 2;
  private readonly static global::MeasuredTemperatures.Types.MeasurementType MeasurementTypeDefaultValue = global::MeasuredTemperatures.Types.MeasurementType.Periodic;

  private global::MeasuredTemperatures.Types.MeasurementType measurementType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::MeasuredTemperatures.Types.MeasurementType MeasurementType {
    get { if ((_hasBits0 & 2) != 0) { return measurementType_; } else { return MeasurementTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      measurementType_ = value;
    }
  }
  /// <summary>Gets whether the "measurementType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMeasurementType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "measurementType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMeasurementType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "measuredTemperaturesInDegreeCelsius" field.</summary>
  public const int MeasuredTemperaturesInDegreeCelsiusFieldNumber = 3;
  private static readonly pb::FieldCodec<float> _repeated_measuredTemperaturesInDegreeCelsius_codec
      = pb::FieldCodec.ForFloat(26);
  private readonly pbc::RepeatedField<float> measuredTemperaturesInDegreeCelsius_ = new pbc::RepeatedField<float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<float> MeasuredTemperaturesInDegreeCelsius {
    get { return measuredTemperaturesInDegreeCelsius_; }
  }

  /// <summary>Field number for the "lastRecordedDeviceError" field.</summary>
  public const int LastRecordedDeviceErrorFieldNumber = 4;
  private global::MeasuredTemperatures.Types.DeviceError lastRecordedDeviceError_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::MeasuredTemperatures.Types.DeviceError LastRecordedDeviceError {
    get { return lastRecordedDeviceError_; }
    set {
      lastRecordedDeviceError_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as MeasuredTemperatures);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(MeasuredTemperatures other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FieldThermometerId != other.FieldThermometerId) return false;
    if (MeasurementType != other.MeasurementType) return false;
    if(!measuredTemperaturesInDegreeCelsius_.Equals(other.measuredTemperaturesInDegreeCelsius_)) return false;
    if (!object.Equals(LastRecordedDeviceError, other.LastRecordedDeviceError)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFieldThermometerId) hash ^= FieldThermometerId.GetHashCode();
    if (HasMeasurementType) hash ^= MeasurementType.GetHashCode();
    hash ^= measuredTemperaturesInDegreeCelsius_.GetHashCode();
    if (lastRecordedDeviceError_ != null) hash ^= LastRecordedDeviceError.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasFieldThermometerId) {
      output.WriteRawTag(8);
      output.WriteInt64(FieldThermometerId);
    }
    if (HasMeasurementType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MeasurementType);
    }
    measuredTemperaturesInDegreeCelsius_.WriteTo(output, _repeated_measuredTemperaturesInDegreeCelsius_codec);
    if (lastRecordedDeviceError_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LastRecordedDeviceError);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasFieldThermometerId) {
      output.WriteRawTag(8);
      output.WriteInt64(FieldThermometerId);
    }
    if (HasMeasurementType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MeasurementType);
    }
    measuredTemperaturesInDegreeCelsius_.WriteTo(ref output, _repeated_measuredTemperaturesInDegreeCelsius_codec);
    if (lastRecordedDeviceError_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LastRecordedDeviceError);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasFieldThermometerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FieldThermometerId);
    }
    if (HasMeasurementType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MeasurementType);
    }
    size += measuredTemperaturesInDegreeCelsius_.CalculateSize(_repeated_measuredTemperaturesInDegreeCelsius_codec);
    if (lastRecordedDeviceError_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastRecordedDeviceError);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(MeasuredTemperatures other) {
    if (other == null) {
      return;
    }
    if (other.HasFieldThermometerId) {
      FieldThermometerId = other.FieldThermometerId;
    }
    if (other.HasMeasurementType) {
      MeasurementType = other.MeasurementType;
    }
    measuredTemperaturesInDegreeCelsius_.Add(other.measuredTemperaturesInDegreeCelsius_);
    if (other.lastRecordedDeviceError_ != null) {
      if (lastRecordedDeviceError_ == null) {
        LastRecordedDeviceError = new global::MeasuredTemperatures.Types.DeviceError();
      }
      LastRecordedDeviceError.MergeFrom(other.LastRecordedDeviceError);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FieldThermometerId = input.ReadInt64();
          break;
        }
        case 16: {
          MeasurementType = (global::MeasuredTemperatures.Types.MeasurementType) input.ReadEnum();
          break;
        }
        case 26:
        case 29: {
          measuredTemperaturesInDegreeCelsius_.AddEntriesFrom(input, _repeated_measuredTemperaturesInDegreeCelsius_codec);
          break;
        }
        case 34: {
          if (lastRecordedDeviceError_ == null) {
            LastRecordedDeviceError = new global::MeasuredTemperatures.Types.DeviceError();
          }
          input.ReadMessage(LastRecordedDeviceError);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          FieldThermometerId = input.ReadInt64();
          break;
        }
        case 16: {
          MeasurementType = (global::MeasuredTemperatures.Types.MeasurementType) input.ReadEnum();
          break;
        }
        case 26:
        case 29: {
          measuredTemperaturesInDegreeCelsius_.AddEntriesFrom(ref input, _repeated_measuredTemperaturesInDegreeCelsius_codec);
          break;
        }
        case 34: {
          if (lastRecordedDeviceError_ == null) {
            LastRecordedDeviceError = new global::MeasuredTemperatures.Types.DeviceError();
          }
          input.ReadMessage(LastRecordedDeviceError);
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the MeasuredTemperatures message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum MeasurementType {
      [pbr::OriginalName("PERIODIC")] Periodic = 0,
      [pbr::OriginalName("REQUESTED")] Requested = 1,
      [pbr::OriginalName("EXTREMITY")] Extremity = 2,
    }

    public sealed partial class DeviceError : pb::IMessage<DeviceError>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<DeviceError> _parser = new pb::MessageParser<DeviceError>(() => new DeviceError());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<DeviceError> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::MeasuredTemperatures.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceError() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceError(DeviceError other) : this() {
        message_ = other.message_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public DeviceError Clone() {
        return new DeviceError(this);
      }

      /// <summary>Field number for the "message" field.</summary>
      public const int MessageFieldNumber = 1;
      private readonly static string MessageDefaultValue = "";

      private string message_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Message {
        get { return message_ ?? MessageDefaultValue; }
        set {
          message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "message" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMessage {
        get { return message_ != null; }
      }
      /// <summary>Clears the value of the "message" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMessage() {
        message_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as DeviceError);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(DeviceError other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Message != other.Message) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasMessage) hash ^= Message.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasMessage) {
          output.WriteRawTag(10);
          output.WriteString(Message);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasMessage) {
          output.WriteRawTag(10);
          output.WriteString(Message);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasMessage) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(DeviceError other) {
        if (other == null) {
          return;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Message = input.ReadString();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Message = input.ReadString();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
