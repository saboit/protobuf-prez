// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FieldThermometer.proto

#include "FieldThermometer.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR MeasuredTemperatures_DeviceError::MeasuredTemperatures_DeviceError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct MeasuredTemperatures_DeviceErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasuredTemperatures_DeviceErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasuredTemperatures_DeviceErrorDefaultTypeInternal() {}
  union {
    MeasuredTemperatures_DeviceError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasuredTemperatures_DeviceErrorDefaultTypeInternal _MeasuredTemperatures_DeviceError_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MeasuredTemperatures::MeasuredTemperatures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.measuredtemperaturesindegreecelsius_)*/ {}

  , /*decltype(_impl_.lastrecordeddeviceerror_)*/nullptr
  , /*decltype(_impl_.fieldthermometerid_)*/ ::int64_t{0}

  , /*decltype(_impl_.measurementtype_)*/ 0
} {}
struct MeasuredTemperaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeasuredTemperaturesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeasuredTemperaturesDefaultTypeInternal() {}
  union {
    MeasuredTemperatures _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasuredTemperaturesDefaultTypeInternal _MeasuredTemperatures_default_instance_;
static ::_pb::Metadata file_level_metadata_FieldThermometer_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_FieldThermometer_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_FieldThermometer_2eproto = nullptr;
const ::uint32_t TableStruct_FieldThermometer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures_DeviceError, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures_DeviceError, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures_DeviceError, _impl_.message_),
    0,
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures, _impl_.fieldthermometerid_),
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures, _impl_.measurementtype_),
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures, _impl_.measuredtemperaturesindegreecelsius_),
    PROTOBUF_FIELD_OFFSET(::MeasuredTemperatures, _impl_.lastrecordeddeviceerror_),
    1,
    2,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::MeasuredTemperatures_DeviceError)},
        { 10, 22, -1, sizeof(::MeasuredTemperatures)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_MeasuredTemperatures_DeviceError_default_instance_._instance,
    &::_MeasuredTemperatures_default_instance_._instance,
};
const char descriptor_table_protodef_FieldThermometer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\026FieldThermometer.proto\"\251\003\n\024MeasuredTem"
    "peratures\022\037\n\022fieldThermometerId\030\001 \001(\003H\000\210"
    "\001\001\022C\n\017measurementType\030\002 \001(\0162%.MeasuredTe"
    "mperatures.MeasurementTypeH\001\210\001\001\022+\n#measu"
    "redTemperaturesInDegreeCelsius\030\003 \003(\002\022G\n\027"
    "lastRecordedDeviceError\030\004 \001(\0132!.Measured"
    "Temperatures.DeviceErrorH\002\210\001\001\032/\n\013DeviceE"
    "rror\022\024\n\007message\030\001 \001(\tH\000\210\001\001B\n\n\010_message\"="
    "\n\017MeasurementType\022\014\n\010PERIODIC\020\000\022\r\n\tREQUE"
    "STED\020\001\022\r\n\tEXTREMITY\020\002B\025\n\023_fieldThermomet"
    "erIdB\022\n\020_measurementTypeB\032\n\030_lastRecorde"
    "dDeviceErrorb\006proto3"
};
static ::absl::once_flag descriptor_table_FieldThermometer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_FieldThermometer_2eproto = {
    false,
    false,
    460,
    descriptor_table_protodef_FieldThermometer_2eproto,
    "FieldThermometer.proto",
    &descriptor_table_FieldThermometer_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_FieldThermometer_2eproto::offsets,
    file_level_metadata_FieldThermometer_2eproto,
    file_level_enum_descriptors_FieldThermometer_2eproto,
    file_level_service_descriptors_FieldThermometer_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_FieldThermometer_2eproto_getter() {
  return &descriptor_table_FieldThermometer_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_FieldThermometer_2eproto(&descriptor_table_FieldThermometer_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeasuredTemperatures_MeasurementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FieldThermometer_2eproto);
  return file_level_enum_descriptors_FieldThermometer_2eproto[0];
}
bool MeasuredTemperatures_MeasurementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MeasuredTemperatures_MeasurementType MeasuredTemperatures::PERIODIC;
constexpr MeasuredTemperatures_MeasurementType MeasuredTemperatures::REQUESTED;
constexpr MeasuredTemperatures_MeasurementType MeasuredTemperatures::EXTREMITY;
constexpr MeasuredTemperatures_MeasurementType MeasuredTemperatures::MeasurementType_MIN;
constexpr MeasuredTemperatures_MeasurementType MeasuredTemperatures::MeasurementType_MAX;
constexpr int MeasuredTemperatures::MeasurementType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class MeasuredTemperatures_DeviceError::_Internal {
 public:
  using HasBits = decltype(std::declval<MeasuredTemperatures_DeviceError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MeasuredTemperatures_DeviceError, _impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MeasuredTemperatures_DeviceError::MeasuredTemperatures_DeviceError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MeasuredTemperatures.DeviceError)
}
MeasuredTemperatures_DeviceError::MeasuredTemperatures_DeviceError(const MeasuredTemperatures_DeviceError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeasuredTemperatures_DeviceError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MeasuredTemperatures.DeviceError)
}

inline void MeasuredTemperatures_DeviceError::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MeasuredTemperatures_DeviceError::~MeasuredTemperatures_DeviceError() {
  // @@protoc_insertion_point(destructor:MeasuredTemperatures.DeviceError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeasuredTemperatures_DeviceError::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void MeasuredTemperatures_DeviceError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeasuredTemperatures_DeviceError::Clear() {
// @@protoc_insertion_point(message_clear_start:MeasuredTemperatures.DeviceError)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasuredTemperatures_DeviceError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MeasuredTemperatures.DeviceError.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MeasuredTemperatures_DeviceError::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MeasuredTemperatures.DeviceError)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "MeasuredTemperatures.DeviceError.message");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MeasuredTemperatures.DeviceError)
  return target;
}

::size_t MeasuredTemperatures_DeviceError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MeasuredTemperatures.DeviceError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasuredTemperatures_DeviceError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeasuredTemperatures_DeviceError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasuredTemperatures_DeviceError::GetClassData() const { return &_class_data_; }


void MeasuredTemperatures_DeviceError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeasuredTemperatures_DeviceError*>(&to_msg);
  auto& from = static_cast<const MeasuredTemperatures_DeviceError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MeasuredTemperatures.DeviceError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasuredTemperatures_DeviceError::CopyFrom(const MeasuredTemperatures_DeviceError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MeasuredTemperatures.DeviceError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasuredTemperatures_DeviceError::IsInitialized() const {
  return true;
}

void MeasuredTemperatures_DeviceError::InternalSwap(MeasuredTemperatures_DeviceError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasuredTemperatures_DeviceError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FieldThermometer_2eproto_getter, &descriptor_table_FieldThermometer_2eproto_once,
      file_level_metadata_FieldThermometer_2eproto[0]);
}
// ===================================================================

class MeasuredTemperatures::_Internal {
 public:
  using HasBits = decltype(std::declval<MeasuredTemperatures>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MeasuredTemperatures, _impl_._has_bits_);
  static void set_has_fieldthermometerid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_measurementtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::MeasuredTemperatures_DeviceError& lastrecordeddeviceerror(const MeasuredTemperatures* msg);
  static void set_has_lastrecordeddeviceerror(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::MeasuredTemperatures_DeviceError&
MeasuredTemperatures::_Internal::lastrecordeddeviceerror(const MeasuredTemperatures* msg) {
  return *msg->_impl_.lastrecordeddeviceerror_;
}
MeasuredTemperatures::MeasuredTemperatures(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MeasuredTemperatures)
}
MeasuredTemperatures::MeasuredTemperatures(const MeasuredTemperatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MeasuredTemperatures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.measuredtemperaturesindegreecelsius_) { from._impl_.measuredtemperaturesindegreecelsius_ }

    , decltype(_impl_.lastrecordeddeviceerror_){nullptr}
    , decltype(_impl_.fieldthermometerid_) {}

    , decltype(_impl_.measurementtype_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.lastrecordeddeviceerror_ = new ::MeasuredTemperatures_DeviceError(*from._impl_.lastrecordeddeviceerror_);
  }
  ::memcpy(&_impl_.fieldthermometerid_, &from._impl_.fieldthermometerid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.measurementtype_) -
    reinterpret_cast<char*>(&_impl_.fieldthermometerid_)) + sizeof(_impl_.measurementtype_));
  // @@protoc_insertion_point(copy_constructor:MeasuredTemperatures)
}

inline void MeasuredTemperatures::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.measuredtemperaturesindegreecelsius_) { arena }

    , decltype(_impl_.lastrecordeddeviceerror_){nullptr}
    , decltype(_impl_.fieldthermometerid_) { ::int64_t{0} }

    , decltype(_impl_.measurementtype_) { 0 }

  };
}

MeasuredTemperatures::~MeasuredTemperatures() {
  // @@protoc_insertion_point(destructor:MeasuredTemperatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MeasuredTemperatures::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.measuredtemperaturesindegreecelsius_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.lastrecordeddeviceerror_;
}

void MeasuredTemperatures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MeasuredTemperatures::Clear() {
// @@protoc_insertion_point(message_clear_start:MeasuredTemperatures)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_measuredtemperaturesindegreecelsius()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.lastrecordeddeviceerror_ != nullptr);
    _impl_.lastrecordeddeviceerror_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.fieldthermometerid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.measurementtype_) -
        reinterpret_cast<char*>(&_impl_.fieldthermometerid_)) + sizeof(_impl_.measurementtype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasuredTemperatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 fieldThermometerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_fieldthermometerid(&has_bits);
          _impl_.fieldthermometerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .MeasuredTemperatures.MeasurementType measurementType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_measurementtype(static_cast<::MeasuredTemperatures_MeasurementType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float measuredTemperaturesInDegreeCelsius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_measuredtemperaturesindegreecelsius(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 29) {
          _internal_add_measuredtemperaturesindegreecelsius(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .MeasuredTemperatures.DeviceError lastRecordedDeviceError = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lastrecordeddeviceerror(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MeasuredTemperatures::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MeasuredTemperatures)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 fieldThermometerId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_fieldthermometerid(), target);
  }

  // optional .MeasuredTemperatures.MeasurementType measurementType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_measurementtype(), target);
  }

  // repeated float measuredTemperaturesInDegreeCelsius = 3;
  if (this->_internal_measuredtemperaturesindegreecelsius_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_measuredtemperaturesindegreecelsius(), target);
  }

  // optional .MeasuredTemperatures.DeviceError lastRecordedDeviceError = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lastrecordeddeviceerror(this),
        _Internal::lastrecordeddeviceerror(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MeasuredTemperatures)
  return target;
}

::size_t MeasuredTemperatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MeasuredTemperatures)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float measuredTemperaturesInDegreeCelsius = 3;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_measuredtemperaturesindegreecelsius_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .MeasuredTemperatures.DeviceError lastRecordedDeviceError = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lastrecordeddeviceerror_);
    }

    // optional int64 fieldThermometerId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_fieldthermometerid());
    }

    // optional .MeasuredTemperatures.MeasurementType measurementType = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_measurementtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasuredTemperatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MeasuredTemperatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasuredTemperatures::GetClassData() const { return &_class_data_; }


void MeasuredTemperatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MeasuredTemperatures*>(&to_msg);
  auto& from = static_cast<const MeasuredTemperatures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MeasuredTemperatures)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.measuredtemperaturesindegreecelsius_.MergeFrom(from._impl_.measuredtemperaturesindegreecelsius_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_lastrecordeddeviceerror()->::MeasuredTemperatures_DeviceError::MergeFrom(
          from._internal_lastrecordeddeviceerror());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fieldthermometerid_ = from._impl_.fieldthermometerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.measurementtype_ = from._impl_.measurementtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasuredTemperatures::CopyFrom(const MeasuredTemperatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MeasuredTemperatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasuredTemperatures::IsInitialized() const {
  return true;
}

void MeasuredTemperatures::InternalSwap(MeasuredTemperatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.measuredtemperaturesindegreecelsius_.InternalSwap(&other->_impl_.measuredtemperaturesindegreecelsius_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasuredTemperatures, _impl_.measurementtype_)
      + sizeof(MeasuredTemperatures::_impl_.measurementtype_)
      - PROTOBUF_FIELD_OFFSET(MeasuredTemperatures, _impl_.lastrecordeddeviceerror_)>(
          reinterpret_cast<char*>(&_impl_.lastrecordeddeviceerror_),
          reinterpret_cast<char*>(&other->_impl_.lastrecordeddeviceerror_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasuredTemperatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_FieldThermometer_2eproto_getter, &descriptor_table_FieldThermometer_2eproto_once,
      file_level_metadata_FieldThermometer_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MeasuredTemperatures_DeviceError*
Arena::CreateMaybeMessage< ::MeasuredTemperatures_DeviceError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MeasuredTemperatures_DeviceError >(arena);
}
template<> PROTOBUF_NOINLINE ::MeasuredTemperatures*
Arena::CreateMaybeMessage< ::MeasuredTemperatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MeasuredTemperatures >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
