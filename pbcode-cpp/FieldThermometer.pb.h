// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FieldThermometer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FieldThermometer_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_FieldThermometer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_FieldThermometer_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FieldThermometer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_FieldThermometer_2eproto;
class MeasuredTemperatures;
struct MeasuredTemperaturesDefaultTypeInternal;
extern MeasuredTemperaturesDefaultTypeInternal _MeasuredTemperatures_default_instance_;
class MeasuredTemperatures_DeviceError;
struct MeasuredTemperatures_DeviceErrorDefaultTypeInternal;
extern MeasuredTemperatures_DeviceErrorDefaultTypeInternal _MeasuredTemperatures_DeviceError_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::MeasuredTemperatures* Arena::CreateMaybeMessage<::MeasuredTemperatures>(Arena*);
template <>
::MeasuredTemperatures_DeviceError* Arena::CreateMaybeMessage<::MeasuredTemperatures_DeviceError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MeasuredTemperatures_MeasurementType : int {
  MeasuredTemperatures_MeasurementType_PERIODIC = 0,
  MeasuredTemperatures_MeasurementType_REQUESTED = 1,
  MeasuredTemperatures_MeasurementType_EXTREMITY = 2,
  MeasuredTemperatures_MeasurementType_MeasuredTemperatures_MeasurementType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MeasuredTemperatures_MeasurementType_MeasuredTemperatures_MeasurementType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MeasuredTemperatures_MeasurementType_IsValid(int value);
constexpr MeasuredTemperatures_MeasurementType MeasuredTemperatures_MeasurementType_MeasurementType_MIN = static_cast<MeasuredTemperatures_MeasurementType>(0);
constexpr MeasuredTemperatures_MeasurementType MeasuredTemperatures_MeasurementType_MeasurementType_MAX = static_cast<MeasuredTemperatures_MeasurementType>(2);
constexpr int MeasuredTemperatures_MeasurementType_MeasurementType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MeasuredTemperatures_MeasurementType_descriptor();
template <typename T>
const std::string& MeasuredTemperatures_MeasurementType_Name(T value) {
  static_assert(std::is_same<T, MeasuredTemperatures_MeasurementType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MeasurementType_Name().");
  return MeasuredTemperatures_MeasurementType_Name(static_cast<MeasuredTemperatures_MeasurementType>(value));
}
template <>
inline const std::string& MeasuredTemperatures_MeasurementType_Name(MeasuredTemperatures_MeasurementType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<MeasuredTemperatures_MeasurementType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MeasuredTemperatures_MeasurementType_Parse(absl::string_view name, MeasuredTemperatures_MeasurementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MeasuredTemperatures_MeasurementType>(
      MeasuredTemperatures_MeasurementType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MeasuredTemperatures_DeviceError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MeasuredTemperatures.DeviceError) */ {
 public:
  inline MeasuredTemperatures_DeviceError() : MeasuredTemperatures_DeviceError(nullptr) {}
  ~MeasuredTemperatures_DeviceError() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MeasuredTemperatures_DeviceError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasuredTemperatures_DeviceError(const MeasuredTemperatures_DeviceError& from);
  MeasuredTemperatures_DeviceError(MeasuredTemperatures_DeviceError&& from) noexcept
    : MeasuredTemperatures_DeviceError() {
    *this = ::std::move(from);
  }

  inline MeasuredTemperatures_DeviceError& operator=(const MeasuredTemperatures_DeviceError& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasuredTemperatures_DeviceError& operator=(MeasuredTemperatures_DeviceError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasuredTemperatures_DeviceError& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasuredTemperatures_DeviceError* internal_default_instance() {
    return reinterpret_cast<const MeasuredTemperatures_DeviceError*>(
               &_MeasuredTemperatures_DeviceError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MeasuredTemperatures_DeviceError& a, MeasuredTemperatures_DeviceError& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasuredTemperatures_DeviceError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasuredTemperatures_DeviceError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasuredTemperatures_DeviceError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasuredTemperatures_DeviceError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasuredTemperatures_DeviceError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MeasuredTemperatures_DeviceError& from) {
    MeasuredTemperatures_DeviceError::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasuredTemperatures_DeviceError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MeasuredTemperatures.DeviceError";
  }
  protected:
  explicit MeasuredTemperatures_DeviceError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // optional string message = 1;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:MeasuredTemperatures.DeviceError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FieldThermometer_2eproto;
};// -------------------------------------------------------------------

class MeasuredTemperatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MeasuredTemperatures) */ {
 public:
  inline MeasuredTemperatures() : MeasuredTemperatures(nullptr) {}
  ~MeasuredTemperatures() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MeasuredTemperatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasuredTemperatures(const MeasuredTemperatures& from);
  MeasuredTemperatures(MeasuredTemperatures&& from) noexcept
    : MeasuredTemperatures() {
    *this = ::std::move(from);
  }

  inline MeasuredTemperatures& operator=(const MeasuredTemperatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasuredTemperatures& operator=(MeasuredTemperatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasuredTemperatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasuredTemperatures* internal_default_instance() {
    return reinterpret_cast<const MeasuredTemperatures*>(
               &_MeasuredTemperatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MeasuredTemperatures& a, MeasuredTemperatures& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasuredTemperatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasuredTemperatures* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasuredTemperatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasuredTemperatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasuredTemperatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MeasuredTemperatures& from) {
    MeasuredTemperatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasuredTemperatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MeasuredTemperatures";
  }
  protected:
  explicit MeasuredTemperatures(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MeasuredTemperatures_DeviceError DeviceError;

  using MeasurementType = MeasuredTemperatures_MeasurementType;
  static constexpr MeasurementType PERIODIC = MeasuredTemperatures_MeasurementType_PERIODIC;
  static constexpr MeasurementType REQUESTED = MeasuredTemperatures_MeasurementType_REQUESTED;
  static constexpr MeasurementType EXTREMITY = MeasuredTemperatures_MeasurementType_EXTREMITY;
  static inline bool MeasurementType_IsValid(int value) {
    return MeasuredTemperatures_MeasurementType_IsValid(value);
  }
  static constexpr MeasurementType MeasurementType_MIN = MeasuredTemperatures_MeasurementType_MeasurementType_MIN;
  static constexpr MeasurementType MeasurementType_MAX = MeasuredTemperatures_MeasurementType_MeasurementType_MAX;
  static constexpr int MeasurementType_ARRAYSIZE = MeasuredTemperatures_MeasurementType_MeasurementType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MeasurementType_descriptor() {
    return MeasuredTemperatures_MeasurementType_descriptor();
  }
  template <typename T>
  static inline const std::string& MeasurementType_Name(T value) {
    return MeasuredTemperatures_MeasurementType_Name(value);
  }
  static inline bool MeasurementType_Parse(absl::string_view name, MeasurementType* value) {
    return MeasuredTemperatures_MeasurementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMeasuredTemperaturesInDegreeCelsiusFieldNumber = 3,
    kLastRecordedDeviceErrorFieldNumber = 4,
    kFieldThermometerIdFieldNumber = 1,
    kMeasurementTypeFieldNumber = 2,
  };
  // repeated float measuredTemperaturesInDegreeCelsius = 3;
  int measuredtemperaturesindegreecelsius_size() const;
  private:
  int _internal_measuredtemperaturesindegreecelsius_size() const;

  public:
  void clear_measuredtemperaturesindegreecelsius() ;
  float measuredtemperaturesindegreecelsius(int index) const;
  void set_measuredtemperaturesindegreecelsius(int index, float value);
  void add_measuredtemperaturesindegreecelsius(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& measuredtemperaturesindegreecelsius() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_measuredtemperaturesindegreecelsius();

  private:
  float _internal_measuredtemperaturesindegreecelsius(int index) const;
  void _internal_add_measuredtemperaturesindegreecelsius(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_measuredtemperaturesindegreecelsius() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_measuredtemperaturesindegreecelsius();

  public:
  // optional .MeasuredTemperatures.DeviceError lastRecordedDeviceError = 4;
  bool has_lastrecordeddeviceerror() const;
  void clear_lastrecordeddeviceerror() ;
  const ::MeasuredTemperatures_DeviceError& lastrecordeddeviceerror() const;
  PROTOBUF_NODISCARD ::MeasuredTemperatures_DeviceError* release_lastrecordeddeviceerror();
  ::MeasuredTemperatures_DeviceError* mutable_lastrecordeddeviceerror();
  void set_allocated_lastrecordeddeviceerror(::MeasuredTemperatures_DeviceError* lastrecordeddeviceerror);
  private:
  const ::MeasuredTemperatures_DeviceError& _internal_lastrecordeddeviceerror() const;
  ::MeasuredTemperatures_DeviceError* _internal_mutable_lastrecordeddeviceerror();
  public:
  void unsafe_arena_set_allocated_lastrecordeddeviceerror(
      ::MeasuredTemperatures_DeviceError* lastrecordeddeviceerror);
  ::MeasuredTemperatures_DeviceError* unsafe_arena_release_lastrecordeddeviceerror();
  // optional int64 fieldThermometerId = 1;
  bool has_fieldthermometerid() const;
  void clear_fieldthermometerid() ;
  ::int64_t fieldthermometerid() const;
  void set_fieldthermometerid(::int64_t value);

  private:
  ::int64_t _internal_fieldthermometerid() const;
  void _internal_set_fieldthermometerid(::int64_t value);

  public:
  // optional .MeasuredTemperatures.MeasurementType measurementType = 2;
  bool has_measurementtype() const;
  void clear_measurementtype() ;
  ::MeasuredTemperatures_MeasurementType measurementtype() const;
  void set_measurementtype(::MeasuredTemperatures_MeasurementType value);

  private:
  ::MeasuredTemperatures_MeasurementType _internal_measurementtype() const;
  void _internal_set_measurementtype(::MeasuredTemperatures_MeasurementType value);

  public:
  // @@protoc_insertion_point(class_scope:MeasuredTemperatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> measuredtemperaturesindegreecelsius_;
    ::MeasuredTemperatures_DeviceError* lastrecordeddeviceerror_;
    ::int64_t fieldthermometerid_;
    int measurementtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FieldThermometer_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MeasuredTemperatures_DeviceError

// optional string message = 1;
inline bool MeasuredTemperatures_DeviceError::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MeasuredTemperatures_DeviceError::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MeasuredTemperatures_DeviceError::message() const {
  // @@protoc_insertion_point(field_get:MeasuredTemperatures.DeviceError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MeasuredTemperatures_DeviceError::set_message(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MeasuredTemperatures.DeviceError.message)
}
inline std::string* MeasuredTemperatures_DeviceError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:MeasuredTemperatures.DeviceError.message)
  return _s;
}
inline const std::string& MeasuredTemperatures_DeviceError::_internal_message() const {
  return _impl_.message_.Get();
}
inline void MeasuredTemperatures_DeviceError::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* MeasuredTemperatures_DeviceError::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* MeasuredTemperatures_DeviceError::release_message() {
  // @@protoc_insertion_point(field_release:MeasuredTemperatures.DeviceError.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MeasuredTemperatures_DeviceError::set_allocated_message(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MeasuredTemperatures.DeviceError.message)
}

// -------------------------------------------------------------------

// MeasuredTemperatures

// optional int64 fieldThermometerId = 1;
inline bool MeasuredTemperatures::has_fieldthermometerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MeasuredTemperatures::clear_fieldthermometerid() {
  _impl_.fieldthermometerid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t MeasuredTemperatures::fieldthermometerid() const {
  // @@protoc_insertion_point(field_get:MeasuredTemperatures.fieldThermometerId)
  return _internal_fieldthermometerid();
}
inline void MeasuredTemperatures::set_fieldthermometerid(::int64_t value) {
  _internal_set_fieldthermometerid(value);
  // @@protoc_insertion_point(field_set:MeasuredTemperatures.fieldThermometerId)
}
inline ::int64_t MeasuredTemperatures::_internal_fieldthermometerid() const {
  return _impl_.fieldthermometerid_;
}
inline void MeasuredTemperatures::_internal_set_fieldthermometerid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fieldthermometerid_ = value;
}

// optional .MeasuredTemperatures.MeasurementType measurementType = 2;
inline bool MeasuredTemperatures::has_measurementtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MeasuredTemperatures::clear_measurementtype() {
  _impl_.measurementtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::MeasuredTemperatures_MeasurementType MeasuredTemperatures::measurementtype() const {
  // @@protoc_insertion_point(field_get:MeasuredTemperatures.measurementType)
  return _internal_measurementtype();
}
inline void MeasuredTemperatures::set_measurementtype(::MeasuredTemperatures_MeasurementType value) {
   _internal_set_measurementtype(value);
  // @@protoc_insertion_point(field_set:MeasuredTemperatures.measurementType)
}
inline ::MeasuredTemperatures_MeasurementType MeasuredTemperatures::_internal_measurementtype() const {
  return static_cast<::MeasuredTemperatures_MeasurementType>(_impl_.measurementtype_);
}
inline void MeasuredTemperatures::_internal_set_measurementtype(::MeasuredTemperatures_MeasurementType value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.measurementtype_ = value;
}

// repeated float measuredTemperaturesInDegreeCelsius = 3;
inline int MeasuredTemperatures::_internal_measuredtemperaturesindegreecelsius_size() const {
  return _impl_.measuredtemperaturesindegreecelsius_.size();
}
inline int MeasuredTemperatures::measuredtemperaturesindegreecelsius_size() const {
  return _internal_measuredtemperaturesindegreecelsius_size();
}
inline void MeasuredTemperatures::clear_measuredtemperaturesindegreecelsius() {
  _internal_mutable_measuredtemperaturesindegreecelsius()->Clear();
}
inline float MeasuredTemperatures::measuredtemperaturesindegreecelsius(int index) const {
  // @@protoc_insertion_point(field_get:MeasuredTemperatures.measuredTemperaturesInDegreeCelsius)
  return _internal_measuredtemperaturesindegreecelsius(index);
}
inline void MeasuredTemperatures::set_measuredtemperaturesindegreecelsius(int index, float value) {
  _internal_mutable_measuredtemperaturesindegreecelsius()->Set(index, value);
  // @@protoc_insertion_point(field_set:MeasuredTemperatures.measuredTemperaturesInDegreeCelsius)
}
inline void MeasuredTemperatures::add_measuredtemperaturesindegreecelsius(float value) {
  _internal_add_measuredtemperaturesindegreecelsius(value);
  // @@protoc_insertion_point(field_add:MeasuredTemperatures.measuredTemperaturesInDegreeCelsius)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& MeasuredTemperatures::measuredtemperaturesindegreecelsius() const {
  // @@protoc_insertion_point(field_list:MeasuredTemperatures.measuredTemperaturesInDegreeCelsius)
  return _internal_measuredtemperaturesindegreecelsius();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* MeasuredTemperatures::mutable_measuredtemperaturesindegreecelsius() {
  // @@protoc_insertion_point(field_mutable_list:MeasuredTemperatures.measuredTemperaturesInDegreeCelsius)
  return _internal_mutable_measuredtemperaturesindegreecelsius();
}

inline float MeasuredTemperatures::_internal_measuredtemperaturesindegreecelsius(int index) const {
  return _internal_measuredtemperaturesindegreecelsius().Get(index);
}
inline void MeasuredTemperatures::_internal_add_measuredtemperaturesindegreecelsius(float value) {
  _internal_mutable_measuredtemperaturesindegreecelsius()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& MeasuredTemperatures::_internal_measuredtemperaturesindegreecelsius() const {
  return _impl_.measuredtemperaturesindegreecelsius_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* MeasuredTemperatures::_internal_mutable_measuredtemperaturesindegreecelsius() {
  return &_impl_.measuredtemperaturesindegreecelsius_;
}

// optional .MeasuredTemperatures.DeviceError lastRecordedDeviceError = 4;
inline bool MeasuredTemperatures::has_lastrecordeddeviceerror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lastrecordeddeviceerror_ != nullptr);
  return value;
}
inline void MeasuredTemperatures::clear_lastrecordeddeviceerror() {
  if (_impl_.lastrecordeddeviceerror_ != nullptr) _impl_.lastrecordeddeviceerror_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::MeasuredTemperatures_DeviceError& MeasuredTemperatures::_internal_lastrecordeddeviceerror() const {
  const ::MeasuredTemperatures_DeviceError* p = _impl_.lastrecordeddeviceerror_;
  return p != nullptr ? *p : reinterpret_cast<const ::MeasuredTemperatures_DeviceError&>(
      ::_MeasuredTemperatures_DeviceError_default_instance_);
}
inline const ::MeasuredTemperatures_DeviceError& MeasuredTemperatures::lastrecordeddeviceerror() const {
  // @@protoc_insertion_point(field_get:MeasuredTemperatures.lastRecordedDeviceError)
  return _internal_lastrecordeddeviceerror();
}
inline void MeasuredTemperatures::unsafe_arena_set_allocated_lastrecordeddeviceerror(
    ::MeasuredTemperatures_DeviceError* lastrecordeddeviceerror) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastrecordeddeviceerror_);
  }
  _impl_.lastrecordeddeviceerror_ = lastrecordeddeviceerror;
  if (lastrecordeddeviceerror) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MeasuredTemperatures.lastRecordedDeviceError)
}
inline ::MeasuredTemperatures_DeviceError* MeasuredTemperatures::release_lastrecordeddeviceerror() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MeasuredTemperatures_DeviceError* temp = _impl_.lastrecordeddeviceerror_;
  _impl_.lastrecordeddeviceerror_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MeasuredTemperatures_DeviceError* MeasuredTemperatures::unsafe_arena_release_lastrecordeddeviceerror() {
  // @@protoc_insertion_point(field_release:MeasuredTemperatures.lastRecordedDeviceError)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::MeasuredTemperatures_DeviceError* temp = _impl_.lastrecordeddeviceerror_;
  _impl_.lastrecordeddeviceerror_ = nullptr;
  return temp;
}
inline ::MeasuredTemperatures_DeviceError* MeasuredTemperatures::_internal_mutable_lastrecordeddeviceerror() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lastrecordeddeviceerror_ == nullptr) {
    auto* p = CreateMaybeMessage<::MeasuredTemperatures_DeviceError>(GetArenaForAllocation());
    _impl_.lastrecordeddeviceerror_ = p;
  }
  return _impl_.lastrecordeddeviceerror_;
}
inline ::MeasuredTemperatures_DeviceError* MeasuredTemperatures::mutable_lastrecordeddeviceerror() {
  ::MeasuredTemperatures_DeviceError* _msg = _internal_mutable_lastrecordeddeviceerror();
  // @@protoc_insertion_point(field_mutable:MeasuredTemperatures.lastRecordedDeviceError)
  return _msg;
}
inline void MeasuredTemperatures::set_allocated_lastrecordeddeviceerror(::MeasuredTemperatures_DeviceError* lastrecordeddeviceerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lastrecordeddeviceerror_;
  }
  if (lastrecordeddeviceerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lastrecordeddeviceerror);
    if (message_arena != submessage_arena) {
      lastrecordeddeviceerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastrecordeddeviceerror, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lastrecordeddeviceerror_ = lastrecordeddeviceerror;
  // @@protoc_insertion_point(field_set_allocated:MeasuredTemperatures.lastRecordedDeviceError)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::MeasuredTemperatures_MeasurementType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MeasuredTemperatures_MeasurementType>() {
  return ::MeasuredTemperatures_MeasurementType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_FieldThermometer_2eproto_2epb_2eh
